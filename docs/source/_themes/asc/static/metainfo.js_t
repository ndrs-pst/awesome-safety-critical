/*
 * metainfo.js
 * ~~~~~~~~~~
 *
 * This script makes the awesome-safety-critical keywords shine.
 *
 *
 */

document.addEventListener("DOMContentLoaded", function () {
  const CATEGORIES = [
    'types', 'keywords', 'languages', 'standards', 'industries', 'companies', 'people'
  ];

  const COLORS = {
    active: 'red',
    inactive: '#eee',
    noContent: '#aaa'
  };

  const KEYWORD_STATE = Object.freeze({ active: 1, inactive: 2, nocontent: 3 });

  const keywords = document.querySelectorAll('.keyword');
  const sections = document.querySelectorAll('#awesome-safety-critical .section');
  const ascNodes = document.querySelectorAll('div.aws-node');

  const ascShow = (element) => {
    element.classList.add('aws-active');
    element.classList.remove('aws-inactive');
  };

  const ascHide = (element) => {
    element.classList.add('aws-inactive');
    element.classList.remove('aws-active');
  };

  const keywordSetHighlighted = (keyword, state) => {
    keyword.setAttribute('active', state === KEYWORD_STATE.active);
    keyword.classList.toggle('keyword-active', state === KEYWORD_STATE.active);
    keyword.classList.toggle('keyword-inactive', state === KEYWORD_STATE.inactive);
    keyword.classList.toggle('keyword-nocontent', state === KEYWORD_STATE.nocontent);
  };

  const filter = (() => {
    const _filter = {};

    return {
      dump: () => console.log("filter dump:", _filter),
      add: (category, value) => {
        if (!_filter[category]) _filter[category] = [];
        _filter[category].push(value);
      },
      remove: (category, value) => {
        const index = _filter[category]?.indexOf(value);
        if (index > -1) _filter[category].splice(index, 1);
        if (_filter[category]?.length === 0) delete _filter[category];
      },
      shouldWhitelist: (meta) => {
        return Object.entries(_filter).every(([category, values]) =>
          meta[category]?.some((value) => values.includes(value))
        );
      },
      categories: () => Object.keys(_filter),
      includesTag: (category, value) => _filter[category]?.includes(value) || false,
    };
  })();

  const filterNodes = () => {
    filter.dump();
    const filterCategories = filter.categories();

    if (filterCategories.length === 0) {
      ascNodes.forEach(ascShow);
      sections.forEach(ascShow);
      keywords.forEach((kw) => keywordSetHighlighted(kw, KEYWORD_STATE.inactive));
      return;
    }

    const totalMeta = {};

    ascNodes.forEach((ascNode) => {
      const meta = {};

      CATEGORIES.forEach((category) => {
        const value = ascNode.getAttribute(category);
        if (value) meta[category] = value.split(', ');
      });

      if (filter.shouldWhitelist(meta)) {
        ascShow(ascNode);
        Object.entries(meta).forEach(([category, values]) => {
          totalMeta[category] = totalMeta[category] || new Set();
          values.forEach(value => totalMeta[category].add(value));
        });
      } else {
        ascHide(ascNode);
      }
    });

    keywords.forEach((keyword) => {
      const category = keyword.getAttribute('category');
      const value = keyword.textContent.trim();

      if (filter.includesTag(category, value)) {
        keywordSetHighlighted(keyword, KEYWORD_STATE.active);
      } else {
        keywordSetHighlighted(keyword, KEYWORD_STATE.inactive);

        if (!totalMeta[category]?.has(value)) {
          keywordSetHighlighted(keyword, KEYWORD_STATE.nocontent);
        }
      }
    });

    sections.forEach((section) => {
      const activeAscNodes = section.querySelectorAll('.aws-active');
      if (activeAscNodes.length > 0) {
        ascShow(section);
      } else {
        ascHide(section);
      }
    });
  };

  keywords.forEach((keyword) => {
    keyword.addEventListener('click', () => {
      const category = keyword.getAttribute('category');
      const value = keyword.textContent.trim();
      const isActive = keyword.getAttribute('active') === 'true';

      if (!isActive) {
        filter.add(category, value);
      } else {
        filter.remove(category, value);
      }

      filterNodes();
    });
  });
});
